install.packages("ggplot2")
library(ggplot2
)
install.packages("plyr")
library(plyr)
install.packages("RColorBrewer")
library(RColorBrewer)
install.packages("plotly")
install.packages("devtools")
library("devtools")
install_github("ropensci/plotly")
library(plotly)
set_credentials_file("JustinCassidy","i2uwgjcy08")
install.packages('ggthemes')
install.packages("extrafont")
library("extrafont")
font_import()
warning()
install.packages("ggthemes")
library("ggthemes")
q()
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("devtools")
library(devtools)
find_rtools()
?setNamespaceInfo
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Statistical Inference")
swirl()
install_from_swirl("R Programming")
install_from_swirl("Regression Models")
install_from_swirl("Machine Learning")
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Open Intro")
install_from_swirl("Writing swirl Courses")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>10500,r_os == "linus-gnu")
filter(cran,size>10500,r_os == "linux-gnu")
filter(cran,size>100500,r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
cran2
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran, avg_bytes =
| mean(size))
summarize(cran, avg_bytes = mean(size))
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
filter(pack_sum,count>679) -> top_counts
top_counts
View(top_counts)
arrange(top_counts,desc(count))->top_counts_sorted
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
filter(pack_sum,unique>465)->top_unique
View(top_unique)
arrange(top_unique,desc(unique)
)->top_unique_sorted
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
read.csv(path2csv,stringsAsFactors = FALSE)
read.csv(path2csv,stringsAsFactors = FALSE)->mydf
dim(mydf)
swirl()
swirl()
library(tidye3)
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students,sex_class,count,-grade)
gather(students,sex_class,count,-grade)->res
gather(students2,sex_class,count,-grade)->res
res
?separate()
?separate
separate(res,sex_class,c("sex","class"))
source('C:/Users/JUSTIN~1/AppData/Local/Temp/Rtmp4evku6/script1.R')
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
reset()
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(status="passed")
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
?into
?separate
submit()
submit()
submit()
submit()
3
1
3
4
2
1
3
2
1
4
3
2
1
info()
nxt()
skip()
deck
exit
exit()
swirl()
swirl()
deck
52
4/52
0
12/52
3/51
2/51
library(swirl)
swirl()
dice_sqr
ex2_fair<-sum(dice_sqr*dice_fair)
ex2_fair-3.5^2
(sum(dice_sqr*dice_high))-edh^2
sum(dice_high*dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000,1000),1,mean)))
sd(apply(matrix(rnorm(10000,1000),1,mean))
)
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3)*.8^3*(1-.8)^(5-3)
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2,5,.8,lower.tail=FALSE)
qnorm(.1)
0
qnorm(.975,mean=3,2)
3+2+1.96
3+2*1.96
pnorm(1200,1020,50,lower.tail=FALSE)
pnorm((1200-1020)/50)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(0.75,1020,50)
.53
.53
ppois(3,2.5*4)
pbinom(5,1000,0.01)
ppois(5,1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(.975)
qnorm(.95)
.6+c(-1,1)*(qnorm(.975)*sqrt(0.6*(1-.6)/100))
.6+c(-1,1)*qnorm(.975)*sqrt(0.6*(1-.6)/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb<-5/94.32
lamb+c(-1,1)*qnorm(0.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
setwd("C:/Users/Justin Cassidy/Desktop/ReproducibleResearch/Project1")
activity <- read.csv("activity.csv")
View(activity)
View(activity)
LAgraph <- aggregate(activity$steps, by=list(Category=activity$date), FUN=sum)
LAgraph
View(LAgraph)
histogram(LAgraph)
hist(LAgraph)
StepsPerDay$x <- as.numeric(StepsPerDay$x)
StepsPerDay <- aggregate(activity$steps, by=list(Category=activity$date), FUN=sum)
StepsPerDay$x <- as.numeric(StepsPerDay$x)
hist(StepsPerDay)
hist(StepsPerDay$x)
MeanStepsPerDay <- aggregate(activity$steps, by=list(Category=activity$date), FUN=mean
MedianStepsPerDay <- aggregate(activity$steps, by=list(Category=activity$date), FUN=median)
MeanStepsPerDay <- aggregate(activity$steps, by=list(Category=activity$date), FUN=mean
)
MedianStepsPerDay <- aggregate(activity$steps, by=list(Category=activity$date), FUN=median)
View(MeanStepsPerDay)
MeanStepsPerDay <- mean(StepsPerDay$x)
MeanStepsPerDay
?mean
MeanStepsPerDay <- mean(StepsPerDay$x,na.rm = TRUE)
MeanStepsPerDay
MedianStepsPerDay <- median(StepsPerDay$x,na.rm = TRUE)
setwd("C:/Users/Justin Cassidy/Desktop/ReproducibleResearch/Project1")
View(activity)
StepsPerDay <- aggregate(activity$steps, by=list(Category=activity$date), FUN=sum)
View(StepsPerDay)
library("stats")
View(activity)
unzip("activity.zip")
activity <- read.csv("activity.csv")
activity<-as.numeric(activity)
activity$steps<-as.numeric(activity$steps)
unzip("activity.zip")
activity <- read.csv("activity.csv")
activity$steps<-as.numeric(activity$steps)
activity$interval<-as.numeric(activity$interval)
dates <- strptime(activity$date, "%Y-%m-%d")
activity$date <- dates
uniqueDates <- unique(dates)
uniqueIntervals <- unique(activity$interval)
StepsPerDay <- aggregate(activity$steps, by=list(Category=activity$date), FUN=sum)
unzip("activity.zip")
activity <- read.csv("activity.csv")
activity$steps<-as.numeric(activity$steps)
activity$interval<-as.numeric(activity$interval)
dates <- strptime(activity$date, "%Y-%m-%d")
activity$dates <- dates
uniqueDates <- unique(dates)
uniqueIntervals <- unique(activity$interval)
StepsPerDay <- aggregate(activity$steps, by=list(Category=activity$date), FUN=sum)
StepsPerDay$x <- as.numeric(StepsPerDay$x)
hist(StepsPerDay$x)
MeanStepsPerDay <- mean(StepsPerDay$x,na.rm = TRUE)
MedianStepsPerDay <- median(StepsPerDay$x,na.rm = TRUE)
StepsPerInterval <- aggregate(activity$steps, by=list(Category=activity$interval), FUN=mean)
View(StepsPerInterval)
StepsPerInterval <- aggregate(activity$steps, by=list(Category=activity$interval), FUN=mean(na.rm=TRUE))
StepsPerInterval <- aggregate(activity$steps, by=list(Category=activity$interval), FUN=mean,na.rm=TRUE)
View(StepsPerInterval)
plot(StepsPerInterval)
plot(StepsPerInterval, xlab="Interval", ylab="Mean Steps", main="Average Steps Per Interval")
max(StepsPerInterval)
StepsPerInterval$Category==max(StepsPerInterval)
View(StepsPerInterval)
StepsPerInterval$Category==max(StepsPerInterval$x)
max(StepsPerInterval$x)
View(StepsPerInterval)
StepsPerInterval[StepsPerInterval$x==max(StepsPerInterval$x),]
MaxStep <- StepsPerInterval[StepsPerInterval$x==max(StepsPerInterval$x),]
MaxStep$Category
subset(StepsPerInterval, x == max(StepsPerInterval$x))
is.na(activity$steps)
count(is.na(activity$steps))
sum(is.na(activity$steps))
View(StepsPerInterval)
View(activity)
activity2 <- activity
activity2$steps <- ifelse(!is.na(activity2$steps), activity2$steps, StepsPerInterval$x)
View(activity2)
?weekdays
weekdays(activity2)
weekdays(activity2$dates)
weekdays.POSIXt(activity2$dates)
activity2$weekday <- weekdays(activity2$dates)
View(activity2)
ifelse(activity2$weekday == "Saturday" | activity2$weekday == "Sunday"  , "Weekend", "Weekday")
View(activity2)
activity2$day <- ifelse(activity2$weekday == "Saturday" | activity2$weekday == "Sunday"  , "Weekend", "Weekday")
activity2$weekday <- as.factor(activity2$weekday)
activity2$day <- as.factor(activity2$day)
densityplot(activity2$steps~activity2$interval|activity2$day,
main="Density Plot by Numer of Cylinders",
xlab="Miles per Gallon",
layout=c(1,2))
xyplot(activity2$steps~activity2$interval|activity2$day,
main="Density Plot by Numer of Cylinders",
xlab="Miles per Gallon",
layout=c(1,2))
library(lattice)
xyplot(activity2$steps~activity2$interval|activity2$day,
main="Density Plot by Numer of Cylinders",
xlab="Miles per Gallon",
layout=c(1,2))
xyplot(mean(activity2$steps)~activity2$interval|activity2$day,
main="Density Plot by Numer of Cylinders",
xlab="Miles per Gallon",
layout=c(1,2))
WeekdayActivity <- activity2[activity2$day == "Weekday", ]
WeekendActivity <- activity2[activity2$day == "Weekend", ]
View(WeekendActivity)
View(WeekdayActivity)
WeekdayMean <- aggregate(WeekdayActivity$steps, by=list(Category=WeekdayActivity$interval), FUN=mean,na.rm=TRUE)
WeekendMean <- aggregate(WeekendActivity$steps, by=list(Category=WeekendActivity$interval), FUN=mean,na.rm=TRUE)
allactivity <- cbind(WeekdayMean,WeekendMean)
View(allactivity)
allactivity <- rbind(WeekdayMean,WeekendMean)
View(allactivity)
WeekdayMean$day <- "Weekday"
View(WeekdayMean)
WeekdayMean <- aggregate(WeekdayActivity$steps, by=list(Category=WeekdayActivity$interval), FUN=mean,na.rm=TRUE)
WeekdayMean$day <- "Weekday"
WeekendMean <- aggregate(WeekendActivity$steps, by=list(Category=WeekendActivity$interval), FUN=mean,na.rm=TRUE)
WeekendMean$day <- "Weekend"
allactivity <- rbind(WeekdayMean,WeekendMean)
View(allactivity)
allactivity$day <- as.factor(allactivity$day)
xyplot(allactivity$x~allactivity$Category|allactivity$day,
main="Density Plot by Numer of Cylinders",
xlab="Miles per Gallon",
layout=c(1,2))
line(allactivity$x~allactivity$Category|allactivity$day,
main="Density Plot by Numer of Cylinders",
xlab="Daily Intervals",
layout=c(1,2))
xy(allactivity$x~allactivity$Category|allactivity$day,
main="Density Plot by Numer of Cylinders",
xlab="Daily Intervals",
layout=c(1,2))
xyplot(allactivity$x~allactivity$Category|allactivity$day,
main="Density Plot by Numer of Cylinders",
xlab="Daily Intervals",
layout=c(1,2),type = "l", lty = 1,)
xyplot(allactivity$x~allactivity$Category|allactivity$day,
main="Panel Plots Comparing WeekDay with WeekEnd Data",
xlab="Daily Intervals", ylab="Mean Steps",
layout=c(1,2),type = "l", lty = 1)
knit2html()
library(knitr)
knit2html()
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
